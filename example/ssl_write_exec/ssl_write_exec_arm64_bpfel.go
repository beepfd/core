// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSsl_write_exec returns the embedded CollectionSpec for ssl_write_exec.
func loadSsl_write_exec() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Ssl_write_execBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ssl_write_exec: %w", err)
	}

	return spec, err
}

// loadSsl_write_execObjects loads ssl_write_exec and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ssl_write_execObjects
//	*ssl_write_execPrograms
//	*ssl_write_execMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSsl_write_execObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSsl_write_exec()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ssl_write_execSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ssl_write_execSpecs struct {
	ssl_write_execProgramSpecs
	ssl_write_execMapSpecs
	ssl_write_execVariableSpecs
}

// ssl_write_execProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ssl_write_execProgramSpecs struct {
	BPF_UPROBE *ebpf.ProgramSpec `ebpf:"BPF_UPROBE"`
}

// ssl_write_execMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ssl_write_execMapSpecs struct {
}

// ssl_write_execVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ssl_write_execVariableSpecs struct {
}

// ssl_write_execObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSsl_write_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type ssl_write_execObjects struct {
	ssl_write_execPrograms
	ssl_write_execMaps
	ssl_write_execVariables
}

func (o *ssl_write_execObjects) Close() error {
	return _Ssl_write_execClose(
		&o.ssl_write_execPrograms,
		&o.ssl_write_execMaps,
	)
}

// ssl_write_execMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSsl_write_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type ssl_write_execMaps struct {
}

func (m *ssl_write_execMaps) Close() error {
	return _Ssl_write_execClose()
}

// ssl_write_execVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSsl_write_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type ssl_write_execVariables struct {
}

// ssl_write_execPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSsl_write_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type ssl_write_execPrograms struct {
	BPF_UPROBE *ebpf.Program `ebpf:"BPF_UPROBE"`
}

func (p *ssl_write_execPrograms) Close() error {
	return _Ssl_write_execClose(
		p.BPF_UPROBE,
	)
}

func _Ssl_write_execClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ssl_write_exec_arm64_bpfel.o
var _Ssl_write_execBytes []byte
