// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package binary

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ShepherdSchedLatencyT struct {
	Pid           uint32
	Tid           uint32
	DelayNs       uint64
	Ts            uint64
	PreemptedPid  uint32
	PreemptedComm [16]int8
	IsPreempt     uint64
	Comm          [16]int8
}

// LoadShepherd returns the embedded CollectionSpec for Shepherd.
func LoadShepherd() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ShepherdBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Shepherd: %w", err)
	}

	return spec, err
}

// LoadShepherdObjects loads Shepherd and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ShepherdObjects
//	*ShepherdPrograms
//	*ShepherdMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadShepherdObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadShepherd()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ShepherdSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ShepherdSpecs struct {
	ShepherdProgramSpecs
	ShepherdMapSpecs
	ShepherdVariableSpecs
}

// ShepherdProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ShepherdProgramSpecs struct {
	SchedSwitch    *ebpf.ProgramSpec `ebpf:"sched_switch"`
	SchedWakeup    *ebpf.ProgramSpec `ebpf:"sched_wakeup"`
	SchedWakeupNew *ebpf.ProgramSpec `ebpf:"sched_wakeup_new"`
}

// ShepherdMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ShepherdMapSpecs struct {
	LastSample  *ebpf.MapSpec `ebpf:"last_sample"`
	SchedEvents *ebpf.MapSpec `ebpf:"sched_events"`
	WakeupTimes *ebpf.MapSpec `ebpf:"wakeup_times"`
}

// ShepherdVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ShepherdVariableSpecs struct {
	UnusedSchedLatencyT *ebpf.VariableSpec `ebpf:"unused_sched_latency_t"`
}

// ShepherdObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadShepherdObjects or ebpf.CollectionSpec.LoadAndAssign.
type ShepherdObjects struct {
	ShepherdPrograms
	ShepherdMaps
	ShepherdVariables
}

func (o *ShepherdObjects) Close() error {
	return _ShepherdClose(
		&o.ShepherdPrograms,
		&o.ShepherdMaps,
	)
}

// ShepherdMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadShepherdObjects or ebpf.CollectionSpec.LoadAndAssign.
type ShepherdMaps struct {
	LastSample  *ebpf.Map `ebpf:"last_sample"`
	SchedEvents *ebpf.Map `ebpf:"sched_events"`
	WakeupTimes *ebpf.Map `ebpf:"wakeup_times"`
}

func (m *ShepherdMaps) Close() error {
	return _ShepherdClose(
		m.LastSample,
		m.SchedEvents,
		m.WakeupTimes,
	)
}

// ShepherdVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadShepherdObjects or ebpf.CollectionSpec.LoadAndAssign.
type ShepherdVariables struct {
	UnusedSchedLatencyT *ebpf.Variable `ebpf:"unused_sched_latency_t"`
}

// ShepherdPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadShepherdObjects or ebpf.CollectionSpec.LoadAndAssign.
type ShepherdPrograms struct {
	SchedSwitch    *ebpf.Program `ebpf:"sched_switch"`
	SchedWakeup    *ebpf.Program `ebpf:"sched_wakeup"`
	SchedWakeupNew *ebpf.Program `ebpf:"sched_wakeup_new"`
}

func (p *ShepherdPrograms) Close() error {
	return _ShepherdClose(
		p.SchedSwitch,
		p.SchedWakeup,
		p.SchedWakeupNew,
	)
}

func _ShepherdClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed shepherd_x86_bpfel.o
var _ShepherdBytes []byte
