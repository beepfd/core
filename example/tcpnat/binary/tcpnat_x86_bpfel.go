// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package binary

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type TcpNatIpv4KeyT struct {
	Pid   uint32
	Tid   uint32
	Saddr uint32
	Daddr uint32
	Lport uint16
	Dport uint16
}

type TcpNatPidCommT struct {
	Pid  uint64
	Comm [16]int8
}

type TcpNatTcptracerStatusT struct {
	State           uint64
	PidTgid         uint64
	What            uint64
	OffsetSaddr     uint64
	OffsetDaddr     uint64
	OffsetSport     uint64
	OffsetDport     uint64
	OffsetNetns     uint64
	OffsetIno       uint64
	OffsetFamily    uint64
	OffsetDaddrIpv6 uint64
	Err             uint64
	DaddrIpv6       [4]uint32
	Netns           uint32
	Saddr           uint32
	Daddr           uint32
	Sport           uint16
	Dport           uint16
	Family          uint16
	Padding         uint16
	_               [4]byte
}

// LoadTcpNat returns the embedded CollectionSpec for TcpNat.
func LoadTcpNat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcpNatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load TcpNat: %w", err)
	}

	return spec, err
}

// LoadTcpNatObjects loads TcpNat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TcpNatObjects
//	*TcpNatPrograms
//	*TcpNatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTcpNatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTcpNat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TcpNatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcpNatSpecs struct {
	TcpNatProgramSpecs
	TcpNatMapSpecs
	TcpNatVariableSpecs
}

// TcpNatProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcpNatProgramSpecs struct {
	KprobeTcpV4Connect    *ebpf.ProgramSpec `ebpf:"kprobe__tcp_v4_connect"`
	KretprobeTcpV4Connect *ebpf.ProgramSpec `ebpf:"kretprobe__tcp_v4_connect"`
}

// TcpNatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcpNatMapSpecs struct {
	ConnectsockIpv4 *ebpf.MapSpec `ebpf:"connectsock_ipv4"`
	TcpEventIpv4    *ebpf.MapSpec `ebpf:"tcp_event_ipv4"`
	TcptracerStatus *ebpf.MapSpec `ebpf:"tcptracer_status"`
	TuplepidIpv4    *ebpf.MapSpec `ebpf:"tuplepid_ipv4"`
}

// TcpNatVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcpNatVariableSpecs struct {
	UnusedIpv4KeyT         *ebpf.VariableSpec `ebpf:"unused_ipv4_key_t"`
	UnusedTcptracerStatusT *ebpf.VariableSpec `ebpf:"unused_tcptracer_status_t"`
}

// TcpNatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTcpNatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcpNatObjects struct {
	TcpNatPrograms
	TcpNatMaps
	TcpNatVariables
}

func (o *TcpNatObjects) Close() error {
	return _TcpNatClose(
		&o.TcpNatPrograms,
		&o.TcpNatMaps,
	)
}

// TcpNatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTcpNatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcpNatMaps struct {
	ConnectsockIpv4 *ebpf.Map `ebpf:"connectsock_ipv4"`
	TcpEventIpv4    *ebpf.Map `ebpf:"tcp_event_ipv4"`
	TcptracerStatus *ebpf.Map `ebpf:"tcptracer_status"`
	TuplepidIpv4    *ebpf.Map `ebpf:"tuplepid_ipv4"`
}

func (m *TcpNatMaps) Close() error {
	return _TcpNatClose(
		m.ConnectsockIpv4,
		m.TcpEventIpv4,
		m.TcptracerStatus,
		m.TuplepidIpv4,
	)
}

// TcpNatVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadTcpNatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcpNatVariables struct {
	UnusedIpv4KeyT         *ebpf.Variable `ebpf:"unused_ipv4_key_t"`
	UnusedTcptracerStatusT *ebpf.Variable `ebpf:"unused_tcptracer_status_t"`
}

// TcpNatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTcpNatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcpNatPrograms struct {
	KprobeTcpV4Connect    *ebpf.Program `ebpf:"kprobe__tcp_v4_connect"`
	KretprobeTcpV4Connect *ebpf.Program `ebpf:"kretprobe__tcp_v4_connect"`
}

func (p *TcpNatPrograms) Close() error {
	return _TcpNatClose(
		p.KprobeTcpV4Connect,
		p.KretprobeTcpV4Connect,
	)
}

func _TcpNatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpnat_x86_bpfel.o
var _TcpNatBytes []byte
