// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package binary

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadKprobepin returns the embedded CollectionSpec for kprobepin.
func loadKprobepin() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KprobepinBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kprobepin: %w", err)
	}

	return spec, err
}

// loadKprobepinObjects loads kprobepin and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kprobepinObjects
//	*kprobepinPrograms
//	*kprobepinMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKprobepinObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKprobepin()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kprobepinSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobepinSpecs struct {
	kprobepinProgramSpecs
	kprobepinMapSpecs
	kprobepinVariableSpecs
}

// kprobepinProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobepinProgramSpecs struct {
	RpcExitTask *ebpf.ProgramSpec `ebpf:"rpc_exit_task"`
}

// kprobepinMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobepinMapSpecs struct {
	KprobeMap *ebpf.MapSpec `ebpf:"kprobe_map"`
}

// kprobepinVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobepinVariableSpecs struct {
}

// kprobepinObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKprobepinObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobepinObjects struct {
	kprobepinPrograms
	kprobepinMaps
	kprobepinVariables
}

func (o *kprobepinObjects) Close() error {
	return _KprobepinClose(
		&o.kprobepinPrograms,
		&o.kprobepinMaps,
	)
}

// kprobepinMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKprobepinObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobepinMaps struct {
	KprobeMap *ebpf.Map `ebpf:"kprobe_map"`
}

func (m *kprobepinMaps) Close() error {
	return _KprobepinClose(
		m.KprobeMap,
	)
}

// kprobepinVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadKprobepinObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobepinVariables struct {
}

// kprobepinPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKprobepinObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobepinPrograms struct {
	RpcExitTask *ebpf.Program `ebpf:"rpc_exit_task"`
}

func (p *kprobepinPrograms) Close() error {
	return _KprobepinClose(
		p.RpcExitTask,
	)
}

func _KprobepinClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kprobepin_x86_bpfel.o
var _KprobepinBytes []byte
