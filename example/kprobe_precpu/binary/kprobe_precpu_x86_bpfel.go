// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package binary

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadKprobe_precpu returns the embedded CollectionSpec for kprobe_precpu.
func loadKprobe_precpu() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Kprobe_precpuBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kprobe_precpu: %w", err)
	}

	return spec, err
}

// loadKprobe_precpuObjects loads kprobe_precpu and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kprobe_precpuObjects
//	*kprobe_precpuPrograms
//	*kprobe_precpuMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKprobe_precpuObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKprobe_precpu()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kprobe_precpuSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobe_precpuSpecs struct {
	kprobe_precpuProgramSpecs
	kprobe_precpuMapSpecs
	kprobe_precpuVariableSpecs
}

// kprobe_precpuProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobe_precpuProgramSpecs struct {
	RpcExitTask *ebpf.ProgramSpec `ebpf:"rpc_exit_task"`
}

// kprobe_precpuMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobe_precpuMapSpecs struct {
	KprobeMap *ebpf.MapSpec `ebpf:"kprobe_map"`
}

// kprobe_precpuVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobe_precpuVariableSpecs struct {
}

// kprobe_precpuObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKprobe_precpuObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobe_precpuObjects struct {
	kprobe_precpuPrograms
	kprobe_precpuMaps
	kprobe_precpuVariables
}

func (o *kprobe_precpuObjects) Close() error {
	return _Kprobe_precpuClose(
		&o.kprobe_precpuPrograms,
		&o.kprobe_precpuMaps,
	)
}

// kprobe_precpuMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKprobe_precpuObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobe_precpuMaps struct {
	KprobeMap *ebpf.Map `ebpf:"kprobe_map"`
}

func (m *kprobe_precpuMaps) Close() error {
	return _Kprobe_precpuClose(
		m.KprobeMap,
	)
}

// kprobe_precpuVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadKprobe_precpuObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobe_precpuVariables struct {
}

// kprobe_precpuPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKprobe_precpuObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobe_precpuPrograms struct {
	RpcExitTask *ebpf.Program `ebpf:"rpc_exit_task"`
}

func (p *kprobe_precpuPrograms) Close() error {
	return _Kprobe_precpuClose(
		p.RpcExitTask,
	)
}

func _Kprobe_precpuClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kprobe_precpu_x86_bpfel.o
var _Kprobe_precpuBytes []byte
